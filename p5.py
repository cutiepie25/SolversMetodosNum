"""
TAREA 5: Movimiento del p√©ndulo en la Tierra vs Luna

Un p√©ndulo de longitud l oscila m√°s r√°pido en la Tierra o en la Luna?

a) Tome l = 3 y g = 32 para la aceleraci√≥n de la gravedad en la Tierra. 
   Use alg√∫n m√©todo num√©rico para generar una curva de soluci√≥n num√©rica 
   para el modelo no lineal del p√©ndulo:

   d¬≤Œ∏/dt¬≤ + (g/l)sen(Œ∏) = 0  
   
   Condiciones iniciales: Œ∏(0) = 1, Œ∏'(0) = 2

   Repita usando los mismos valores pero utilice 0.165g para la Luna.

b) De las gr√°ficas determine: 
   - ¬øQu√© p√©ndulo oscila m√°s r√°pido?
   - ¬øQu√© p√©ndulo tiene mayor amplitud?

CONVERSI√ìN A SISTEMA DE PRIMER ORDEN:
--------------------------------------
La ecuaci√≥n de segundo orden d¬≤Œ∏/dt¬≤ + (g/l)sen(Œ∏) = 0 se convierte en:

Variables:
  y‚ÇÅ = Œ∏        (posici√≥n angular en radianes)
  y‚ÇÇ = Œ∏' = dŒ∏/dt   (velocidad angular en rad/s)

Sistema equivalente:
  dy‚ÇÅ/dt = y‚ÇÇ                    (la derivada de la posici√≥n es la velocidad)
  dy‚ÇÇ/dt = -(g/l)sen(y‚ÇÅ)         (la derivada de la velocidad es la aceleraci√≥n)

Condiciones iniciales:
  y‚ÇÅ(0) = 1 rad
  y‚ÇÇ(0) = 2 rad/s
"""

import math
import matplotlib.pyplot as plt
from solvers import rk4_sistema

# ============================================
# PAR√ÅMETROS DEL PROBLEMA
# ============================================

# Par√°metros f√≠sicos
L = 3.0                    # Longitud del p√©ndulo (metros)
G_TIERRA = 32.0           # Aceleraci√≥n en la Tierra (m/s¬≤)
G_LUNA = 0.165 * G_TIERRA # Aceleraci√≥n en la Luna (m/s¬≤)

# Condiciones iniciales
THETA_0 = 1.0  # √Ångulo inicial (radianes) ‚âà 57.3¬∞
OMEGA_0 = 2.0  # Velocidad angular inicial (rad/s)

# Par√°metros num√©ricos
T_INICIAL = 0.0
T_FINAL = 10.0   # Simular 10 segundos
H = 0.01         # Paso peque√±o para buena precisi√≥n


# ============================================
# DEFINICI√ìN DEL SISTEMA DE ECUACIONES
# ============================================

def sistema_pendulo(t, y, g, l):
    """
    Sistema de ecuaciones para el p√©ndulo no lineal.
    
    Par√°metros:
    -----------
    t : float
        Tiempo actual (no se usa en este caso, pero RK4 lo requiere)
    y : list [y‚ÇÅ, y‚ÇÇ]
        y‚ÇÅ = Œ∏ (√°ngulo)
        y‚ÇÇ = Œ∏' (velocidad angular)
    g : float
        Aceleraci√≥n de la gravedad
    l : float
        Longitud del p√©ndulo
    
    Retorna:
    --------
    [dy‚ÇÅ/dt, dy‚ÇÇ/dt] : list
        dy‚ÇÅ/dt = y‚ÇÇ
        dy‚ÇÇ/dt = -(g/l)sen(y‚ÇÅ)
    
    EXPLICACI√ìN F√çSICA:
    -------------------
    - dy‚ÇÅ/dt = y‚ÇÇ: La tasa de cambio del √°ngulo es la velocidad angular
    - dy‚ÇÇ/dt = -(g/l)sen(y‚ÇÅ): La aceleraci√≥n angular viene de la componente
      tangencial de la gravedad: a = -g*sen(Œ∏)/l (con l normalizado)
    """
    theta = y[0]      # y‚ÇÅ = Œ∏ (posici√≥n angular)
    omega = y[1]      # y‚ÇÇ = œâ = dŒ∏/dt (velocidad angular)
    
    # Derivadas
    dtheta_dt = omega                    # dy‚ÇÅ/dt = y‚ÇÇ
    domega_dt = -(g/l) * math.sin(theta) # dy‚ÇÇ/dt = -(g/l)sen(y‚ÇÅ)
    
    return [dtheta_dt, domega_dt]


# ============================================
# FUNCIONES AUXILIARES
# ============================================

def crear_funcion_pendulo(g, l):
    """
    Crea una funci√≥n del sistema de p√©ndulo con g y l fijos.
    Esto es necesario porque rk4_sistema espera f(t, y) pero
    nuestro sistema tambi√©n depende de g y l.
    """
    def f(t, y):
        return sistema_pendulo(t, y, g, l)
    return f


def calcular_periodo_aproximado(t_vals, theta_vals):
    """
    Calcula el periodo aproximado del p√©ndulo detectando los cruces por cero.
    
    Un periodo completo ocurre cuando el p√©ndulo vuelve a la misma posici√≥n
    con la misma direcci√≥n de movimiento.
    """
    cruces = []
    
    # Detectar cruces por cero (cuando Œ∏ cambia de signo)
    for i in range(1, len(theta_vals)):
        if theta_vals[i-1] * theta_vals[i] < 0:  # Cambio de signo
            # Interpolaci√≥n lineal para encontrar el tiempo exacto del cruce
            t_cruce = t_vals[i-1] + (t_vals[i] - t_vals[i-1]) * abs(theta_vals[i-1]) / (abs(theta_vals[i-1]) + abs(theta_vals[i]))
            cruces.append(t_cruce)
    
    if len(cruces) >= 2:
        # El periodo es el doble del tiempo entre dos cruces consecutivos
        # (un cruce es media oscilaci√≥n)
        periodo = 2 * (cruces[1] - cruces[0])
        return periodo
    
    return None


def calcular_amplitud(theta_vals):
    """
    Calcula la amplitud m√°xima del movimiento.
    La amplitud es el valor m√°ximo absoluto de Œ∏.
    """
    return max(abs(min(theta_vals)), abs(max(theta_vals)))


# ============================================
# FUNCI√ìN PRINCIPAL
# ============================================

def main():
    """
    Simula el movimiento del p√©ndulo en la Tierra y en la Luna,
    genera gr√°ficas comparativas y analiza el comportamiento.
    """
    
    print("=" * 70)
    print("üåçüåô SIMULACI√ìN: P√âNDULO EN LA TIERRA VS LUNA")
    print("=" * 70)
    print(f"\nPar√°metros del p√©ndulo:")
    print(f"  ‚Ä¢ Longitud: l = {L} m")
    print(f"  ‚Ä¢ √Ångulo inicial: Œ∏(0) = {THETA_0} rad ({math.degrees(THETA_0):.1f}¬∞)")
    print(f"  ‚Ä¢ Velocidad inicial: Œ∏'(0) = {OMEGA_0} rad/s")
    print(f"\nAceleraciones:")
    print(f"  ‚Ä¢ Tierra: g = {G_TIERRA} m/s¬≤")
    print(f"  ‚Ä¢ Luna:   g = {G_LUNA:.2f} m/s¬≤ (0.165 √ó g_Tierra)")
    print(f"\nM√©todo num√©rico: RK4 para sistemas")
    print(f"Paso de integraci√≥n: h = {H} s")
    print(f"Tiempo de simulaci√≥n: [0, {T_FINAL}] s")
    print("=" * 70)
    
    # ========== SIMULACI√ìN EN LA TIERRA ==========
    print("\nüåç Resolviendo para la Tierra...")
    y0 = [THETA_0, OMEGA_0]  # Condiciones iniciales: [Œ∏(0), Œ∏'(0)]
    f_tierra = crear_funcion_pendulo(G_TIERRA, L)
    
    t_tierra, y_tierra = rk4_sistema(f_tierra, T_INICIAL, y0, H, T_FINAL)
    
    # Extraer Œ∏(t) y œâ(t)
    theta_tierra = [y[0] for y in y_tierra]  # Posici√≥n angular
    omega_tierra = [y[1] for y in y_tierra]  # Velocidad angular
    
    # ========== SIMULACI√ìN EN LA LUNA ==========
    print("üåô Resolviendo para la Luna...")
    f_luna = crear_funcion_pendulo(G_LUNA, L)
    
    t_luna, y_luna = rk4_sistema(f_luna, T_INICIAL, y0, H, T_FINAL)
    
    # Extraer Œ∏(t) y œâ(t)
    theta_luna = [y[0] for y in y_luna]
    omega_luna = [y[1] for y in y_luna]
    
    # ========== AN√ÅLISIS DE RESULTADOS ==========
    print("\n" + "=" * 70)
    print("üìä AN√ÅLISIS DE RESULTADOS")
    print("=" * 70)
    
    # Calcular periodos
    periodo_tierra = calcular_periodo_aproximado(t_tierra, theta_tierra)
    periodo_luna = calcular_periodo_aproximado(t_luna, theta_luna)
    
    # Calcular amplitudes
    amp_tierra = calcular_amplitud(theta_tierra)
    amp_luna = calcular_amplitud(theta_luna)
    
    # Mostrar resultados
    print(f"\nüåç TIERRA:")
    if periodo_tierra:
        print(f"  ‚Ä¢ Periodo aproximado: T ‚âà {periodo_tierra:.3f} s")
        print(f"  ‚Ä¢ Frecuencia: f ‚âà {1/periodo_tierra:.3f} Hz")
    print(f"  ‚Ä¢ Amplitud m√°xima: {amp_tierra:.3f} rad ({math.degrees(amp_tierra):.1f}¬∞)")
    
    print(f"\nüåô LUNA:")
    if periodo_luna:
        print(f"  ‚Ä¢ Periodo aproximado: T ‚âà {periodo_luna:.3f} s")
        print(f"  ‚Ä¢ Frecuencia: f ‚âà {1/periodo_luna:.3f} Hz")
    print(f"  ‚Ä¢ Amplitud m√°xima: {amp_luna:.3f} rad ({math.degrees(amp_luna):.1f}¬∞)")
    
    # Comparaci√≥n
    print(f"\nüìà COMPARACI√ìN:")
    if periodo_tierra and periodo_luna:
        ratio_periodo = periodo_luna / periodo_tierra
        print(f"  ‚Ä¢ El p√©ndulo en la Luna oscila {ratio_periodo:.2f}√ó m√°s lento")
        print(f"  ‚Ä¢ El p√©ndulo en la Tierra es {1/ratio_periodo:.2f}√ó m√°s r√°pido")
    
    ratio_amp = amp_luna / amp_tierra
    print(f"  ‚Ä¢ Amplitud Luna / Amplitud Tierra = {ratio_amp:.3f}")
    
    # Conclusiones
    print(f"\nüéØ CONCLUSIONES:")
    print(f"  ‚Ä¢ ¬øCu√°l oscila m√°s r√°pido? ‚Üí {'TIERRA' if periodo_tierra and periodo_luna and periodo_tierra < periodo_luna else 'LUNA'}")
    print(f"  ‚Ä¢ ¬øCu√°l tiene mayor amplitud? ‚Üí {'TIERRA' if amp_tierra > amp_luna else 'LUNA'}")
    print("=" * 70)
    
    # ========== GR√ÅFICAS ==========
    print("\nüìä Generando gr√°ficas...")
    
    # Crear figura con 3 subplots
    fig, axes = plt.subplots(3, 1, figsize=(12, 10))
    fig.suptitle('Movimiento del P√©ndulo: Tierra vs Luna', fontsize=16, fontweight='bold')
    
    # --- Gr√°fica 1: Posici√≥n angular Œ∏(t) ---
    ax1 = axes[0]
    ax1.plot(t_tierra, theta_tierra, 'b-', label='Tierra', linewidth=1.5)
    ax1.plot(t_luna, theta_luna, 'r-', label='Luna', linewidth=1.5)
    ax1.set_ylabel('Œ∏(t) [radianes]', fontsize=11)
    ax1.set_title('a) Posici√≥n Angular Œ∏(t)', fontsize=12, fontweight='bold')
    ax1.grid(True, alpha=0.3)
    ax1.legend(loc='upper right')
    ax1.axhline(y=0, color='k', linestyle='--', linewidth=0.5, alpha=0.5)
    
    # --- Gr√°fica 2: Velocidad angular œâ(t) ---
    ax2 = axes[1]
    ax2.plot(t_tierra, omega_tierra, 'b-', label='Tierra', linewidth=1.5)
    ax2.plot(t_luna, omega_luna, 'r-', label='Luna', linewidth=1.5)
    ax2.set_ylabel('œâ(t) [rad/s]', fontsize=11)
    ax2.set_title('b) Velocidad Angular œâ(t) = dŒ∏/dt', fontsize=12, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    ax2.legend(loc='upper right')
    ax2.axhline(y=0, color='k', linestyle='--', linewidth=0.5, alpha=0.5)
    
    # --- Gr√°fica 3: Retrato de fase (œâ vs Œ∏) ---
    ax3 = axes[2]
    ax3.plot(theta_tierra, omega_tierra, 'b-', label='Tierra', linewidth=1.5, alpha=0.7)
    ax3.plot(theta_luna, omega_luna, 'r-', label='Luna', linewidth=1.5, alpha=0.7)
    ax3.set_xlabel('Œ∏ [radianes]', fontsize=11)
    ax3.set_ylabel('œâ [rad/s]', fontsize=11)
    ax3.set_title('c) Retrato de Fase (Espacio de estados)', fontsize=12, fontweight='bold')
    ax3.grid(True, alpha=0.3)
    ax3.legend(loc='upper right')
    ax3.axhline(y=0, color='k', linestyle='--', linewidth=0.5, alpha=0.5)
    ax3.axvline(x=0, color='k', linestyle='--', linewidth=0.5, alpha=0.5)
    
    plt.tight_layout()
    plt.show()
    
    print("‚úÖ Gr√°ficas generadas exitosamente")
    print("\nüéâ ¬°Simulaci√≥n completada!\n")


if __name__ == "__main__":
    main()